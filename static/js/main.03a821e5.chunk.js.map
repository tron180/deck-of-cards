{"version":3,"sources":["Card.js","Deck.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","angle","Math","random","xPos","yPos","_transform","concat","react_default","a","createElement","style","transform","className","src","image","alt","name","Component","Deck","state","deck","drawn","getCard","bind","assertThisInitialized","axios","get","setState","data","id","deck_id","cardUrl","cardRes","success","Error","console","log","card","cards","st","toConsumableArray","code","value","suit","alert","_context2","t0","map","c","Card_Card","key","onClick","App","Deck_Deck","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8UAGqBA,qBACjB,SAAAA,EAAYC,GAAM,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,IACN,IAAIQ,EAAwB,GAAhBC,KAAKC,SAAgB,GAC7BC,EAAuB,GAAhBF,KAAKC,SAAgB,GAC5BE,EAAuB,GAAhBH,KAAKC,SAAgB,GAJlB,OAKdT,EAAKY,WAAL,aAAAC,OAA+BH,EAA/B,QAAAG,OAA0CF,EAA1C,eAAAE,OAA4DN,EAA5D,QALcP,wEAQd,OACIc,EAAAC,EAAAC,cAAA,OACIC,MAAO,CAACC,UAAWf,KAAKS,YACxBO,UAAU,OACVC,IAAKjB,KAAKJ,MAAMsB,MAChBC,IAAKnB,KAAKJ,MAAMwB,cAdEC,uCCIbC,cACjB,SAAAA,EAAY1B,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsB,IACdzB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwB,GAAAnB,KAAAH,KAAMJ,KACD2B,MAAQ,CACTC,KAAM,KACNC,MAAM,IAEV5B,EAAK6B,QAAU7B,EAAK6B,QAAQC,KAAb7B,OAAA8B,EAAA,EAAA9B,CAAAD,IANDA,iNAUGgC,IAAMC,IAAN,GAAApB,OAbJ,sCAaI,yBAAbc,SACJxB,KAAK+B,SAAS,CACVP,KAAMA,EAAKQ,sQAKXC,EAAKjC,KAAKuB,MAAMC,KAAKU,iBAEjBC,YAtBK,kDAsBwBF,qBACbJ,IAAMC,IAAIK,cAA1BC,UACQJ,KAAKK,8BACP,IAAIC,MAAM,yBAGpBC,QAAQC,IAAIJ,EAAQJ,MAChBS,EAAOL,EAAQJ,KAAKU,MAAM,GAC9B1C,KAAK+B,SAAS,SAAAY,GAAE,MAAK,CACjBlB,MAAK,GAAAf,OAAAZ,OAAA8C,EAAA,EAAA9C,CACE6C,EAAGlB,OADL,CAED,CACIQ,GAAIQ,EAAKI,KACT3B,MAAOuB,EAAKvB,MACZE,KAAI,GAAAV,OAAK+B,EAAKK,MAAV,KAAApC,OAAmB+B,EAAKM,8DAKxCC,MAAKC,EAAAC,iJAKT,IAAMR,EAAQ1C,KAAKuB,MAAME,MAAM0B,IAAI,SAAAC,GAAC,OAChCzC,EAAAC,EAAAC,cAACwC,EAAD,CAAMC,IAAKF,EAAEnB,GAAIb,KAAMgC,EAAEhC,KAAMF,MAAOkC,EAAElC,UAE5C,OACIP,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACXL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,cAAd,eACAL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,uBAAd,iCACAL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,WAAWuC,QAASvD,KAAK0B,SAA3C,aACAf,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACV0B,WArDarB,mBCKnBmC,MARf,WACE,OACE7C,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAC4C,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.03a821e5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Card.css';\n\nexport default class Card extends Component {\n    constructor(props){\n        super(props);\n        let angle = Math.random() * 90 - 45;\n        let xPos = Math.random() * 40 - 20;\n        let yPos = Math.random() * 40 - 20;\n        this._transform = `translate(${xPos}px, ${yPos}px) rotate(${angle}deg)`\n    }\n    render() {\n        return (\n            <img \n                style={{transform: this._transform}} \n                className=\"Card\" \n                src={this.props.image} \n                alt={this.props.name} \n            />\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport Card from './Card';\nimport './Deck.css';\nimport axios from \"axios\";\n\nconst API_BASE_URL = \"http://deckofcardsapi.com/api/deck/\";\n\nexport default class Deck extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            deck: null,\n            drawn:[]\n        };\n        this.getCard = this.getCard.bind(this);\n    }\n\n    async componentDidMount(){\n        let deck = await axios.get(`${API_BASE_URL}/new/shuffle/`);\n        this.setState({\n            deck: deck.data\n        })\n    }\n\n    async getCard(){\n        let id = this.state.deck.deck_id;\n        try{\n            let cardUrl = `${API_BASE_URL}/${id}/draw/`;\n            let cardRes = await axios.get(cardUrl);\n            if(!cardRes.data.success){\n                throw new Error(\"No Cards Left!\")\n            }\n        \n            console.log(cardRes.data); \n            let card = cardRes.data.cards[0];\n            this.setState(st => ({\n                drawn: [\n                    ...st.drawn,\n                    {\n                        id: card.code,\n                        image: card.image,\n                        name: `${card.value} ${card.suit}`\n                    }\n                ]\n            }))\n        }catch(err){\n            alert(err);\n        }       \n    }\n\n    render() {\n        const cards = this.state.drawn.map(c => (\n            <Card key={c.id} name={c.name} image={c.image} />\n        ));\n        return (\n            <div className=\"Deck\">\n                <h1 className=\"Deck-title\">Card Dealer</h1>\n                <h2 className=\"Deck-title subtitle\">A Little Demo Made With React</h2>\n                <button className=\"Deck-btn\" onClick={this.getCard}>Get Card!</button>\n                <div className=\"Deck-cardarea\">\n                    {cards}\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport Deck from './Deck';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Deck />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}